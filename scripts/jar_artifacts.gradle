/*
 This gradle script provides some basic tasks for creating common artifact types that Minecraft
 developers like to distribute.
 Shameless pinch from MMD's Gradle Collection and Jas's Forge Modding Skeleton, modified by ProxyNeko.
 https://github.com/MinecraftModDevelopment/Gradle-Collection/
 https://github.com/jriwanek/ForgeModdingSkeleton/
*/

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource

    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:source",
                'Timestamp': System.currentTimeMillis(),
                'Specification-Title': project.mod_id,
                'Specification-Vendor': project.vendor,
                'Specification-Version': '1',
                'Implementation-Title': project.name + '-source',
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java': "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}"
        )

        if (project.hasProperty('mod_at_file')) {
            attributes 'FMLAT': project.mod_at_file
        }

        if (project.hasProperty('core_plugin')) {
            attributes 'FMLCorePlugin': project.core_plugin
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    classifier = 'javadoc'
    from javadoc.destinationDir

    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:javadoc",
                'Timestamp': System.currentTimeMillis(),
                'Specification-Title': project.mod_id,
                'Specification-Vendor': project.vendor,
                'Specification-Version': '1',
                'Implementation-Title': project.name + '-javadoc',
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java': "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}"
        )

        if (project.hasProperty('mod_at_file')) {
            attributes 'FMLAT': project.mod_at_file
        }

        if (project.hasProperty('core_plugin')) {
            attributes 'FMLCorePlugin': project.core_plugin
        }
    }
}

task apiJar(type: Jar) {
    description = 'Creates a JAR containing the API Classes.'
    classifier = 'api'
    from sourceSets.api.output

    // TODO: when FG bug is fixed, remove allJava from the api jar.
    // https://github.com/MinecraftForge/ForgeGradle/issues/369
    // Gradle should be able to pull them from the -sources jar.
    from sourceSets.api.allJava

    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.mod_version}:api",
                'Timestamp': System.currentTimeMillis(),
                'Specification-Title': project.mod_id,
                'Specification-Vendor': project.vendor,
                'Specification-Version': '1',
                'Implementation-Title': project.name + '-api',
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}"
        )

        if (project.hasProperty('mod_at_file')) {
            attributes 'FMLAT': project.mod_at_file
        }

        if (project.hasProperty('core_plugin')) {
            attributes 'FMLCorePlugin': project.core_plugin
        }
    }

}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    classifier = 'deobf'
    from sourceSets.main.output

    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:deobf",
                'Timestamp': System.currentTimeMillis(),
                'Specification-Title': project.mod_id,
                'Specification-Vendor': project.vendor,
                'Specification-Version': '1',
                'Implementation-Title': project.name + '-deobf',
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}"
        )

        if (project.hasProperty('mod_at_file')) {
            attributes 'FMLAT': project.mod_at_file
        }

        if (project.hasProperty('core_plugin')) {
            attributes 'FMLCorePlugin': project.core_plugin
        }
    }
}

artifacts {
    if (getBooleanProperty('create_source_jar')) {
        archives sourceJar
    }

    if (getBooleanProperty('create_javadoc_jar')) {
        archives javadocJar
    }

    if (getBooleanProperty('create_api_jar')) {
        archives apiJar
    }

    if (getBooleanProperty('create_deobf_jar')) {
        archives deobfJar
    }
}

boolean getBooleanProperty(final String property) {
    if (project.hasProperty(property)) {
        return ((String) project.findProperty(property)).toBoolean()
    } else {
        return false
    }
}